/**
 * 创建API服务实例
 */
class ApiService {
  constructor() {
    this.baseUrl = '';
    this.directApiBaseUrl = '';
    this.useDirectApi = false;
    this.initializeBaseUrl();
    this.lastError = null;
    this.connectionStatus = 'unknown'; // 'online', 'offline', 'unknown'
    this.retryCount = 0;
    this.maxRetries = 2;
  }

  /**
   * 初始化API基础URL
   */
  initializeBaseUrl() {
    if (window.location.hostname === 'localhost' || window.location.hostname === '127.0.0.1') {
      // 本地开发环境
      this.baseUrl = 'http://127.0.0.1:8000/api';
      this.directApiBaseUrl = 'http://127.0.0.1:8000/api/direct';
    } else {
      // 生产环境 - Vercel
      this.baseUrl = '/api';
      this.directApiBaseUrl = '/api/direct';
    }
    console.log('API基础URL:', this.baseUrl);
    console.log('直接API基础URL:', this.directApiBaseUrl);
  }

  /**
   * 切换到直接API实现
   */
  enableDirectApi() {
    this.useDirectApi = true;
    console.log('已启用直接API实现');
    return this;
  }

  /**
   * 切换到标准API实现
   */
  enableStandardApi() {
    this.useDirectApi = false;
    console.log('已启用标准API实现');
    return this;
  }

  /**
   * 获取适用的API基础URL
   */
  getActiveBaseUrl() {
    return this.useDirectApi ? this.directApiBaseUrl : this.baseUrl;
  }

  /**
   * 测试API连接
   */
  async testConnection() {
    try {
      // 优先使用/hello端点，如果失败则回退到/status端点
      let endpoint = this.useDirectApi ? `${this.directApiBaseUrl}/hello` : `${this.baseUrl}/hello`;
      console.log(`测试API连接: ${endpoint}`);
      
      try {
        const response = await fetch(endpoint);
        if (response.ok) {
          const data = await response.json();
          console.log('API连接测试结果:', data);
          
          this.connectionStatus = 'online';
          return {
            success: true,
            data,
            implementation: this.useDirectApi ? 'direct' : 'standard'
          };
        } else {
          console.log(`尝试/hello端点失败: ${response.status}，尝试使用/status端点`);
        }
      } catch (error) {
        console.log(`尝试/hello端点出错: ${error.message}，尝试使用/status端点`);
      }
      
      // 如果/hello端点失败，尝试/status端点
      endpoint = this.useDirectApi ? `${this.directApiBaseUrl}/status` : `${this.baseUrl}/status`;
      console.log(`尝试备用API端点: ${endpoint}`);
      
      const response = await fetch(endpoint);
      if (!response.ok) {
        throw new Error(`API状态检查失败: ${response.status}`);
      }
      
      const data = await response.json();
      console.log('API连接测试结果:', data);
      
      this.connectionStatus = 'online';
      return {
        success: true,
        data,
        implementation: this.useDirectApi ? 'direct' : 'standard'
      };
    } catch (error) {
      console.error('API连接测试失败:', error);
      this.connectionStatus = 'offline';
      this.lastError = error;
      
      return {
        success: false,
        error: error.message,
        implementation: this.useDirectApi ? 'direct' : 'standard'
      };
    }
  }

  /**
   * 自动尝试所有可用的API实现
   */
  async autoSelectBestApi() {
    // 首先尝试标准API
    this.enableStandardApi();
    const standardTest = await this.testConnection();
    
    if (standardTest.success) {
      console.log('标准API测试成功，将使用标准API');
      return {
        success: true,
        selectedImplementation: 'standard',
        result: standardTest
      };
    }
    
    // 如果标准API失败，尝试直接API
    console.log('标准API测试失败，尝试使用直接API');
    this.enableDirectApi();
    const directTest = await this.testConnection();
    
    if (directTest.success) {
      console.log('直接API测试成功，将使用直接API');
      return {
        success: true,
        selectedImplementation: 'direct',
        result: directTest
      };
    }
    
    // 作为最后手段，直接尝试访问/api/hello
    console.log('所有API实现测试都失败，尝试直接访问/api/hello');
    try {
      const response = await fetch('/api/hello');
      if (response.ok) {
        console.log('直接访问/api/hello成功，回退到标准API');
        this.enableStandardApi();
        return {
          success: true,
          selectedImplementation: 'standard-fallback',
          result: { success: true, data: await response.json() }
        };
      }
    } catch (error) {
      console.error('直接访问API失败:', error);
    }
    
    // 如果两种实现都失败
    console.error('所有API实现都无法连接');
    // 默认回到标准API
    this.enableStandardApi();
    return {
      success: false,
      selectedImplementation: 'standard',
      standardResult: standardTest,
      directResult: directTest
    };
  }

  /**
   * 执行API请求，支持自动重试和API实现切换
   */
  async executeRequest(url, options = {}, allowFallback = true) {
    const fullUrl = `${this.getActiveBaseUrl()}${url}`;
    console.log(`执行API请求: ${options.method || 'GET'} ${fullUrl}`);
    
    try {
      const response = await fetch(fullUrl, options);
      
      if (!response.ok) {
        const errorText = await response.text();
        throw new Error(`API请求失败: ${response.status} - ${errorText}`);
      }
      
      this.retryCount = 0; // 重置重试计数器
      this.connectionStatus = 'online';
      return await response.json();
    } catch (error) {
      console.error(`API请求失败: ${fullUrl}`, error);
      this.lastError = error;
      
      // 如果允许回退且还有重试次数
      if (allowFallback && this.retryCount < this.maxRetries) {
        this.retryCount++;
        console.log(`尝试切换API实现并重试 (${this.retryCount}/${this.maxRetries})`);
        
        // 切换API实现
        this.useDirectApi = !this.useDirectApi;
        console.log(`已切换到${this.useDirectApi ? '直接' : '标准'}API实现`);
        
        // 递归调用，但不增加重试计数
        return await this.executeRequest(url, options, true);
      }
      
      // 如果已达到最大重试次数或不允许回退
      this.connectionStatus = 'offline';
      throw error; // 重新抛出错误供调用者处理
    }
  }

  /**
   * 获取文章列表
   */
  async getArticles(params = {}) {
    const { filter, sorts, limit, pageSize, startCursor } = params;
    
    const requestBody = {
      filter,
      sorts,
      limit,
      pageSize: pageSize || 1000,
      startCursor
    };
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(requestBody)
    };
    
    try {
      const endpoint = this.useDirectApi ? '/articles' : '/articles';
      return await this.executeRequest(endpoint, options);
    } catch (error) {
      console.error('获取文章列表失败:', error);
      throw error;
    }
  }

  /**
   * 获取文章内容
   */
  async getArticleContent(pageId) {
    if (!pageId) {
      throw new Error('缺少文章ID');
    }
    
    try {
      const endpoint = this.useDirectApi 
        ? `/article-content?pageId=${encodeURIComponent(pageId)}` 
        : `/content?type=article&pageId=${encodeURIComponent(pageId)}`;
      
      return await this.executeRequest(endpoint);
    } catch (error) {
      console.error('获取文章内容失败:', error);
      throw error;
    }
  }

  /**
   * 获取块内容
   */
  async getBlockChildren(blockId) {
    if (!blockId) {
      throw new Error('缺少块ID');
    }
    
    try {
      const endpoint = this.useDirectApi
        ? `/blocks/children?blockId=${encodeURIComponent(blockId)}`
        : `/blocks/${encodeURIComponent(blockId)}/children`;
      
      return await this.executeRequest(endpoint);
    } catch (error) {
      console.error('获取块内容失败:', error);
      throw error;
    }
  }
}

// 创建API服务实例
const apiService = new ApiService();

// 初始化时默认使用标准API，不进行自动测试
apiService.enableStandardApi();
console.log('API服务初始化完成，默认使用标准API');

// 导出API服务实例
window.apiService = apiService; 